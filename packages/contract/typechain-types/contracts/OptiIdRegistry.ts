/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface OptiIdRegistryInterface extends utils.Interface {
  functions: {
    "MAX_DOMAINS_PER_USER()": FunctionFragment;
    "REGISTRATION_FEE()": FunctionFragment;
    "domainComponents(bytes32)": FunctionFragment;
    "domainExists(string)": FunctionFragment;
    "domainOwners(string)": FunctionFragment;
    "getAllComponents()": FunctionFragment;
    "getDomainComponents(string)": FunctionFragment;
    "getDomainInfo(string)": FunctionFragment;
    "getUserDomains(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "previewRandomDomain(address,uint256,uint8)": FunctionFragment;
    "registerRandomDomain(uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setValidComponents(string[],string[],string[],string[])": FunctionFragment;
    "transferDomain(string,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userDomains(address,uint256)": FunctionFragment;
    "validAdjectives(uint256)": FunctionFragment;
    "validChains(uint256)": FunctionFragment;
    "validDescriptors(uint256)": FunctionFragment;
    "validNouns(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_DOMAINS_PER_USER"
      | "REGISTRATION_FEE"
      | "domainComponents"
      | "domainExists"
      | "domainOwners"
      | "getAllComponents"
      | "getDomainComponents"
      | "getDomainInfo"
      | "getUserDomains"
      | "owner"
      | "previewRandomDomain"
      | "registerRandomDomain"
      | "renounceOwnership"
      | "setValidComponents"
      | "transferDomain"
      | "transferOwnership"
      | "userDomains"
      | "validAdjectives"
      | "validChains"
      | "validDescriptors"
      | "validNouns"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_DOMAINS_PER_USER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRATION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainComponents",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "domainExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "domainOwners",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllComponents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainComponents",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDomains",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewRandomDomain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRandomDomain",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setValidComponents",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDomain",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userDomains",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validAdjectives",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validChains",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validDescriptors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validNouns",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_DOMAINS_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRATION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewRandomDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRandomDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validAdjectives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validDescriptors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validNouns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DomainRegistered(string,address)": EventFragment;
    "DomainTransferred(string,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ValidComponentsSet(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DomainRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidComponentsSet"): EventFragment;
}

export interface DomainRegisteredEventObject {
  name: string;
  owner: string;
}
export type DomainRegisteredEvent = TypedEvent<
  [string, string],
  DomainRegisteredEventObject
>;

export type DomainRegisteredEventFilter =
  TypedEventFilter<DomainRegisteredEvent>;

export interface DomainTransferredEventObject {
  name: string;
  from: string;
  to: string;
}
export type DomainTransferredEvent = TypedEvent<
  [string, string, string],
  DomainTransferredEventObject
>;

export type DomainTransferredEventFilter =
  TypedEventFilter<DomainTransferredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ValidComponentsSetEventObject {
  adjectivesCount: BigNumber;
  descriptorsCount: BigNumber;
  nounsCount: BigNumber;
  chainsCount: BigNumber;
}
export type ValidComponentsSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  ValidComponentsSetEventObject
>;

export type ValidComponentsSetEventFilter =
  TypedEventFilter<ValidComponentsSetEvent>;

export interface OptiIdRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptiIdRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DOMAINS_PER_USER(overrides?: CallOverrides): Promise<[BigNumber]>;

    REGISTRATION_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    domainComponents(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, boolean] & {
        adjectiveIndex: number;
        descriptorIndex: number;
        nounIndex: number;
        chainIndex: number;
        exists: boolean;
      }
    >;

    domainExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    domainOwners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; timestamp: BigNumber }>;

    getAllComponents(
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], string[]]>;

    getDomainComponents(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        adjective: string;
        descriptor: string;
        noun: string;
        chain: string;
      }
    >;

    getDomainInfo(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        owner: string;
        timestamp: BigNumber;
        exists: boolean;
      }
    >;

    getUserDomains(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previewRandomDomain(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      chainIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerRandomDomain(
      chainIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidComponents(
      adjectives: PromiseOrValue<string>[],
      descriptors: PromiseOrValue<string>[],
      nouns: PromiseOrValue<string>[],
      chains: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferDomain(
      name: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userDomains(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validAdjectives(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validDescriptors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validNouns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_DOMAINS_PER_USER(overrides?: CallOverrides): Promise<BigNumber>;

  REGISTRATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  domainComponents(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, boolean] & {
      adjectiveIndex: number;
      descriptorIndex: number;
      nounIndex: number;
      chainIndex: number;
      exists: boolean;
    }
  >;

  domainExists(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  domainOwners(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { owner: string; timestamp: BigNumber }>;

  getAllComponents(
    overrides?: CallOverrides
  ): Promise<[string[], string[], string[], string[]]>;

  getDomainComponents(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      adjective: string;
      descriptor: string;
      noun: string;
      chain: string;
    }
  >;

  getDomainInfo(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      owner: string;
      timestamp: BigNumber;
      exists: boolean;
    }
  >;

  getUserDomains(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  previewRandomDomain(
    user: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    chainIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerRandomDomain(
    chainIndex: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidComponents(
    adjectives: PromiseOrValue<string>[],
    descriptors: PromiseOrValue<string>[],
    nouns: PromiseOrValue<string>[],
    chains: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferDomain(
    name: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userDomains(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  validAdjectives(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  validChains(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  validDescriptors(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  validNouns(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_DOMAINS_PER_USER(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    domainComponents(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, boolean] & {
        adjectiveIndex: number;
        descriptorIndex: number;
        nounIndex: number;
        chainIndex: number;
        exists: boolean;
      }
    >;

    domainExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    domainOwners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; timestamp: BigNumber }>;

    getAllComponents(
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], string[]]>;

    getDomainComponents(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        adjective: string;
        descriptor: string;
        noun: string;
        chain: string;
      }
    >;

    getDomainInfo(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        owner: string;
        timestamp: BigNumber;
        exists: boolean;
      }
    >;

    getUserDomains(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    previewRandomDomain(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      chainIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerRandomDomain(
      chainIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setValidComponents(
      adjectives: PromiseOrValue<string>[],
      descriptors: PromiseOrValue<string>[],
      nouns: PromiseOrValue<string>[],
      chains: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferDomain(
      name: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userDomains(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    validAdjectives(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    validChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    validDescriptors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    validNouns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DomainRegistered(string,address)"(
      name?: null,
      owner?: null
    ): DomainRegisteredEventFilter;
    DomainRegistered(name?: null, owner?: null): DomainRegisteredEventFilter;

    "DomainTransferred(string,address,address)"(
      name?: null,
      from?: null,
      to?: null
    ): DomainTransferredEventFilter;
    DomainTransferred(
      name?: null,
      from?: null,
      to?: null
    ): DomainTransferredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ValidComponentsSet(uint256,uint256,uint256,uint256)"(
      adjectivesCount?: null,
      descriptorsCount?: null,
      nounsCount?: null,
      chainsCount?: null
    ): ValidComponentsSetEventFilter;
    ValidComponentsSet(
      adjectivesCount?: null,
      descriptorsCount?: null,
      nounsCount?: null,
      chainsCount?: null
    ): ValidComponentsSetEventFilter;
  };

  estimateGas: {
    MAX_DOMAINS_PER_USER(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    domainComponents(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainOwners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllComponents(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainComponents(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainInfo(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDomains(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previewRandomDomain(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      chainIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRandomDomain(
      chainIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidComponents(
      adjectives: PromiseOrValue<string>[],
      descriptors: PromiseOrValue<string>[],
      nouns: PromiseOrValue<string>[],
      chains: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferDomain(
      name: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userDomains(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validAdjectives(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validDescriptors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validNouns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DOMAINS_PER_USER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REGISTRATION_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainComponents(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainExists(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainOwners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllComponents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainComponents(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainInfo(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDomains(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRandomDomain(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      chainIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRandomDomain(
      chainIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidComponents(
      adjectives: PromiseOrValue<string>[],
      descriptors: PromiseOrValue<string>[],
      nouns: PromiseOrValue<string>[],
      chains: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferDomain(
      name: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userDomains(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validAdjectives(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validDescriptors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validNouns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
